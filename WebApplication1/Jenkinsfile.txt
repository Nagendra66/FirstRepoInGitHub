node
{
stage('Checkout') 
    {
		//Checkout the latest code from source controller
		git 'https://github.com/Nagendra66/FirstRepoInGitHub.git'
		//Bundle the Code and packakging
        bat 'C:/Tools/nuget.exe restore WebApplication1/WebApplication1.sln'
    }
    stage('Build')
    {
		try{
			notifyBuildStatus('started')
			//Build the Solution
			bat '"C:\\Program Files (x86)\\MSBuild\\14.0\\Bin\\MSBuild.exe"  "WebApplication1/WebApplication1.sln" /t:clean /p:Configuration=Release /p:VisualStudioVersion=14.0 /p:DeployOnBuild=true /t:Rebuild /p:GenerateSerializationAssemblies=Off'

			// Success or failure, always send notifications
			notifyBuildStatus(currentBuild.result)
			}
			catch(e){
				// If there was an exception thrown, the build failed
				currentBuild.result = "FAILED"
				notifyFailed()
				throw e
			}
    }
}

def notifyBuildStatus(String buildStatus = 'started') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'completed successfully'
 
  // Default values
  def subject = "Mirabel 2.0 Build ${buildStatus}"
  def summary = "${subject} (${env.BUILD_URL})"
  def details =	"""<p> Mirabel2.0 - Build # ${env.BUILD_NUMBER} -  ${buildStatus} </p>					
					<p>Check console output at "<a href="${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>"</p>"""


 
  // Send notifications
  emailext (
      subject: subject,
      body: details,
      to: '$DEFAULT_RECIPIENTS'
    )
}

 def notifyFailed() {
 
   emailext (
       subject: "Mirabel 2.0 Build FAILED",
       body:"""<p> Mirabel2.0 - Build # ${env.BUILD_NUMBER} -  FAILED</p>					
				<p> Changeset: ${GIT_COMMIT} User: ${GIT_COMMITTER_NAME} or ${GIT_AUTHOR_NAME}</p>
				<p>Check console output at "<a href="${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>"</p>""",
       to: '$DEFAULT_RECIPIENTS'
     )
 }